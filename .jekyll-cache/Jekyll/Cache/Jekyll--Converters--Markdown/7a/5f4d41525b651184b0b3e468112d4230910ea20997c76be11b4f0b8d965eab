I"S+<h3 id="foundry">Foundry</h3>
<p>기존의 스마트컨트렉트 개발은 <a href="https://trufflesuite.com/">Truffle</a>, <a href="https://hardhat.org/">hardhat</a> 등의 툴을 사용하여 개발을 하였습니다. 특히 테스트를 위해선 Hardhat을 통하여 많이 진행했는데, Paradim에서 개발한 <a href="https://github.com/foundry-rs/foundry">Foundry</a>가 이러한 테스트에 새로운 대안으로 등장하였습니다.</p>

<p>Foundry는 쉽게 설명하자면 Solidity 언어를 Solidity로 테스트 가능하게 도와주는 툴입니다. 기존의 툴들을 통해 테스트를 진행하기 위해서는 테스트 코드를  Javascript 혹은 Typescript로 작성해야했기 때문에 많은 의존성과 config들이 필요하였습니다. C언어를 javascript로 테스트하는 것은 이상하게 들릴지도 모르지만 지금까지는 Solidty 그 자체로 테스트되지 못했습니다. 그렇기 때문에 많은 불편함이 발생했었는데, 솔리디티를 자바스크립트에서 테스트할 경우엔 BigNumber 라이브러리를 써가며 숫자를 다루는 불편함이 있었습니다. 이러한 불편함과 혼란성을 Foundry가 해결해줍니다!</p>

<p>Foundry의 Forge를 통한 간단한 테스트 코드 예시는 아래와 같습니다.</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">contract</span> <span class="n">Foo</span> <span class="p">{</span>
  <span class="kt">uint256</span> <span class="k">public</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">function</span> <span class="n">set</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_x</span><span class="p">)</span> <span class="k">external</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">_x</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">function</span> <span class="n">double</span><span class="p">()</span> <span class="k">external</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">contract</span> <span class="n">FooTest</span> <span class="p">{</span>
  <span class="n">Foo</span> <span class="n">foo</span><span class="p">;</span>

  <span class="c1">// The state of the contract gets reset before each
</span>  <span class="c1">// test is run, with the setUp() function being called
</span>  <span class="c1">// each time after deployment. Think of this like a JavaScript
</span>  <span class="c1">// beforeEach block
</span>  <span class="k">function</span> <span class="n">setUp</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
    <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">// A simple unit test
</span>  <span class="k">function</span> <span class="n">testDouble</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
    <span class="nb">require</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">foo</span><span class="p">.</span><span class="n">double</span><span class="p">();</span>
    <span class="nb">require</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// A failing unit test (function name starts with testFail)
</span>  <span class="k">function</span> <span class="n">testFailDouble</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
    <span class="nb">require</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">foo</span><span class="p">.</span><span class="n">double</span><span class="p">();</span>
    <span class="nb">require</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="퍼징-테스트-지원-무작위-데이터-입력">퍼징 테스트 지원 (무작위 데이터 입력)</h3>
<p>테스트를 하다보면 생각하지도 못한 에러사항이 발생하게됩니다. 사람이 모든 테스트 영역을 커버하기는 쉽지 않으므로 무작위의 input을 통해 자동화된 테스트를 수행하는 퍼징 기능이 필요할 수 있습니다. 아래는 Foundry에서 지원하는 퍼징 기능의 한 예시입니다.</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">testDoubleWithFuzzing</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">x</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
  <span class="n">foo</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
  <span class="nb">require</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">==</span> <span class="n">x</span><span class="p">);</span>
  <span class="n">foo</span><span class="p">.</span><span class="n">double</span><span class="p">();</span>
  <span class="nb">require</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위에서 x에 자동으로 여러 값을 대입해 테스트하고 에러가 발생할 시 카운터 예제 값인 x를 아래와같이 보여줍니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[FAIL. Counterexample: calldata=0x44735ef10000000000000000000000000000000000000000000000000000000000000001, args=[Uint(1)]] testDoubleWithFuzzingCounterExample (gas: [fuzztest])
</code></pre></div></div>

<p>이 외에도, VM 상태 값을 변경하는 기능과 라이브 네트워크의 상태를 반영한 테스트 기능들을 수행할 수 있습니다. 아래 예제는 block timestamp 값을 100으로 변경하여 테스트하는 예제입니다.</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">address</span> <span class="k">constant</span> <span class="n">CHEATCODE_ADDRESS</span> <span class="o">=</span> <span class="mh">0x7cFA93148B0B13d88c1DcE8880bd4e175fb0DeDF</span><span class="p">;</span>

<span class="n">interace</span> <span class="n">Vm</span> <span class="p">{</span>
  <span class="c1">// Sets the block.timestamp to `x`.
</span>  <span class="k">function</span> <span class="n">warp</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">x</span><span class="p">)</span> <span class="k">external</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">contract</span> <span class="n">MyTest</span> <span class="p">{</span>
  <span class="n">Vm</span> <span class="n">vm</span> <span class="o">=</span> <span class="n">Vm</span><span class="p">(</span><span class="n">CHEATCODE_ADDRESS</span><span class="p">);</span>

  <span class="k">function</span> <span class="n">testWarp</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
    <span class="n">vm</span><span class="p">.</span><span class="n">warp</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
    <span class="nb">require</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">timestamp</span> <span class="o">==</span> <span class="mi">100</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>위에 코드에서 보듯이, wrap() 함수를 통해 block timestamp 값을 변경하여 테스트가 가능합니다. 이 외에도 block diffculty, block number, slot 값 변경 및 읽기 등 다양한 기능들을 제공하며 더 자세한 사항은 <a href="https://github.com/foundry-rs/foundry/tree/master/forge#cheat-codes">Readme</a>를 참고하시면 됩니다. 다른 개발툴처럼, 실시간 네트워크와의 연동은 node URL을 명시해줌으로써 쉽게 가능합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>forge test --fork-url &lt;your node url&gt; [--fork-block-number &lt;the block number you want&gt;].
</code></pre></div></div>

<p>이처럼 다양한 기능들을 지원하고 있기 때문에 많은 프로젝트들이 점차적으로 Typescript와 더불어 Foundry를 통한 테스트 코드를 작성하는 추세입니다. 저 같은 경우 TreasureDAO가 해당 툴을 통해 디버깅하는 것을 보고 접하게 되었습니다. 그럼 이제 어떻게 설치하는지 살펴봅시다.</p>

<h3 id="foundry-설치">Foundry 설치</h3>
<p><a href="https://github.com/foundry-rs/foundry">Foundry</a>의 Github에서 설치 관련 내용을 확인할 수 있습니다. 저는 Window의 WSL2의 우분투환경에 Docker를 통해 설치해보도록 하겠습니다. docker를 통해 설치할 경우엔 아래와 같은 명령어를 입력해주면 됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull ghcr.io/foundry-rs/foundry:latest
</code></pre></div></div>
<p>위 명령어를 입력하면 아래사진과 같이 정상적으로 설치가 됩니다. foundry의 자세한 도커 사용법은 <a href="https://book.getfoundry.sh/tutorials/foundry-docker">docker 섹션</a>에서 확인할 수 있습니다.</p>

<p style="text-align: center;">
	<img src="http://localhost:4000/assets/images/foundry/docker_foundry_install.png" alt="Drawing" style="max-width: 80%; height: auto;" />
</p>

<h3 id="reference">Reference</h3>
<ol>
  <li><a href="https://www.paradigm.xyz/2021/12/introducing-the-foundry-ethereum-development-toolbox">Paradim’s Blog Post for Foundry</a></li>
</ol>

:ET